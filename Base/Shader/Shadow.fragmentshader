#version 330 core

// Interpolated values from the vertex shaders
in vec3 vertexPosition_cameraspace;
in vec3 fragmentColor;
in vec3 vertexNormal_cameraspace;
in vec2 texCoord;
in vec2 blurVec;
in vec4 shadowCoord;

// Ouput data
out vec4 color;

struct Light {
	int type;
	vec3 position_cameraspace;
	vec3 color;
	float power;
	float kC;
	float kL;
	float kQ;
	vec3 spotDirection;
	float cosCutoff;
	float cosInner;
	float exponent;
};

struct Material {
	vec3 kAmbient;
	vec3 kDiffuse;
	vec3 kSpecular;
	float kShininess;
};

float getAttenuation(Light light, float distance) {
	if(light.type == 1)
		return 1;
	else
		return 1 / max(1, light.kC + light.kL * distance + light.kQ * distance * distance);
}

float getSpotlightEffect(Light light, vec3 lightDirection) {
	vec3 S = normalize(light.spotDirection);
	vec3 L = normalize(lightDirection);
	float cosDirection = dot(L, S);
	//return smoothstep(light.cosCutoff, light.cosInner, cosDirection);
	if(cosDirection < light.cosCutoff)
		return 0;
	else
		return 1; //pow(cosDirection, light.exponent);
}

struct FogParam{
	vec3 Color;
	float FogStart;
	float FogEnd;
	float Density;
	int Type;
	bool FogEnabled;
};

float getFogFactor(FogParam fog, float fogDistance)
{
	if(fog.FogEnabled == false)
		return 0.0;

	float factor = 0.0;
	if(fog.Type == 0) 
		factor = (fog.FogEnd - fogDistance) / (fog.FogEnd - fog.FogStart); 
	else if(fog.Type == 1) 
		factor = exp(- fog.Density * fogDistance); 
	else if(fog.Type == 2) 
		factor = exp(- pow(fog.Density * fogDistance, 2.0) ); 
       
	factor = 1.0 - clamp(factor, 0.0, 1.0); 
    
	return factor;
}

// Constant values
const int MAX_LIGHTS = 8;
const int MAX_TEXTURES = 8;

// Values that stay constant for the whole mesh.
uniform bool lightEnabled;
uniform Light lights[MAX_LIGHTS];
uniform Material material;
uniform int numLights;
uniform bool colorTextureEnabled[MAX_TEXTURES];
//uniform bool colorTextureEnabled1;
uniform sampler2D colorTexture[MAX_TEXTURES];
//uniform sampler2D colorTexture1;
uniform bool textEnabled;
uniform vec3 textColor;
uniform FogParam fogParam;
uniform sampler2D shadowMap;
uniform int shadowSamplingCount;

// Opensource Poisson Disk Values
vec2 poissonDisk[64] = vec2[](
	vec2(-0.613392, 0.617481),
	vec2(0.170019, -0.040254),
	vec2(-0.299417, 0.791925),
	vec2(0.645680, 0.493210),
	vec2(-0.651784, 0.717887),
	vec2(0.421003, 0.027070),
	vec2(-0.817194, -0.271096),
	vec2(-0.705374, -0.668203),
	vec2(0.977050, -0.108615),
	vec2(0.063326, 0.142369),
	vec2(0.203528, 0.214331),
	vec2(-0.667531, 0.326090),
	vec2(-0.098422, -0.295755),
	vec2(-0.885922, 0.215369),
	vec2(0.566637, 0.605213),
	vec2(0.039766, -0.396100),
	vec2(0.751946, 0.453352),
	vec2(0.078707, -0.715323),
	vec2(-0.075838, -0.529344),
	vec2(0.724479, -0.580798),
	vec2(0.222999, -0.215125),
	vec2(-0.467574, -0.405438),
	vec2(-0.248268, -0.814753),
	vec2(0.354411, -0.887570),
	vec2(0.175817, 0.382366),
	vec2(0.487472, -0.063082),
	vec2(-0.084078, 0.898312),
	vec2(0.488876, -0.783441),
	vec2(0.470016, 0.217933),
	vec2(-0.696890, -0.549791),
	vec2(-0.149693, 0.605762),
	vec2(0.034211, 0.979980),
	vec2(0.503098, -0.308878),
	vec2(-0.016205, -0.872921),
	vec2(0.385784, -0.393902),
	vec2(-0.146886, -0.859249),
	vec2(0.643361, 0.164098),
	vec2(0.634388, -0.049471),
	vec2(-0.688894, 0.007843),
	vec2(0.464034, -0.188818),
	vec2(-0.440840, 0.137486),
	vec2(0.364483, 0.511704),
	vec2(0.034028, 0.325968),
	vec2(0.099094, -0.308023),
	vec2(0.693960, -0.366253),
	vec2(0.678884, -0.204688),
	vec2(0.001801, 0.780328),
	vec2(0.145177, -0.898984),
	vec2(0.062655, -0.611866),
	vec2(0.315226, -0.604297),
	vec2(-0.780145, 0.486251),
	vec2(-0.371868, 0.882138),
	vec2(0.200476, 0.494430),
	vec2(-0.494552, -0.711051),
	vec2(0.612476, 0.705252),
	vec2(-0.578845, -0.768792),
	vec2(-0.772454, -0.090976),
	vec2(0.504440, 0.372295),
	vec2(0.155736, 0.065157),
	vec2(0.391522, 0.849605),
	vec2(-0.620106, -0.328104),
	vec2(0.789239, -0.419965),
	vec2(-0.545396, 0.538133),
	vec2(-0.178564, -0.596057)
);

float getShadowEffect(float cosTheta)
{
	//CHANGE THIS VARIABLE TO SWAP SHADOWS
	bool UseUpgradedShaders = true;
	//

	float visibility = 1.0;
	if (!UseUpgradedShaders || shadowSamplingCount < 2)
	{
		//Original
		float bias = 0.005;
		if(texture2D(shadowMap, shadowCoord.xy).x < shadowCoord.z - bias) {
			visibility = 0.25;
		}
	}
	else 
	{
		// Poisson Shadow Sampling
		float bias = 0.0015 * tan(acos(cosTheta));
		float SampleSpread = 2400 - (shadowSamplingCount * 25); // How near samples are to one another, nearer = more
		for (int i = 0; i < shadowSamplingCount; i++){
			if ( texture( shadowMap, shadowCoord.xy + poissonDisk[i]/SampleSpread ).x  <  shadowCoord.z-bias ){
				visibility -= 0.8f/shadowSamplingCount;
				visibility = clamp(visibility, 0, 1 );
			}
		}
	}
	return visibility;
}

void main(){
	float alpha = 1.0;

	if (colorTextureEnabled[0] == true)
	{
		alpha = texture2D( colorTexture[0], texCoord ).a;
	}
	 if (alpha < 0.3)
		discard;

	if(lightEnabled == true)
	{
		// Material properties
		vec4 materialColor = vec4(0, 0, 0, 0);
		
		int texCount = 0;
		
		for (int i = 0; i < MAX_TEXTURES; ++i)
		{
			if(colorTextureEnabled[i] == true)
			{
				materialColor += texture2D( colorTexture[i], texCoord );
				++texCount;

			}		
		}
		if (texCount > 0)
		{
			materialColor = materialColor/texCount;
		}
		else
			materialColor = vec4( fragmentColor, 1 );
	
		// Vectors
		vec3 eyeDirection_cameraspace = - vertexPosition_cameraspace;
		vec3 E = normalize(eyeDirection_cameraspace);
		vec3 N = normalize( vertexNormal_cameraspace );
		
		// Ambient : simulates indirect lighting
		color = materialColor * vec4(material.kAmbient, 1);
		
		for(int i = 0; i < numLights; ++i)
		{
			// Light direction
			float spotlightEffect = 1;
			vec3 lightDirection_cameraspace;
			if(lights[i].type == 1) {
				lightDirection_cameraspace = lights[i].position_cameraspace;
			}
			else if(lights[i].type == 2) {
				lightDirection_cameraspace = lights[i].position_cameraspace - vertexPosition_cameraspace;
				spotlightEffect = getSpotlightEffect(lights[i], lightDirection_cameraspace);
			}
			else {
				lightDirection_cameraspace = lights[i].position_cameraspace - vertexPosition_cameraspace;
			}
			// Distance to the light
			float distance = length( lightDirection_cameraspace );
			
			// Light attenuation
			float attenuationFactor = getAttenuation(lights[i], distance);

			vec3 L = normalize( lightDirection_cameraspace );
			float cosTheta = clamp( dot( N, L ), 0, 1 );
			
			vec3 R = reflect(-L, N);
			float cosAlpha = clamp( dot( E, R ), 0, 1 );
			
			float visibility = getShadowEffect(cosTheta);
			
			color +=
				// Ambient : simulates indirect lighting
				//materialColor * vec4(material.kAmbient, 1) +

				// Diffuse : "color" of the object
				visibility * materialColor * vec4(material.kDiffuse, 1) * vec4(lights[i].color, 1) * lights[i].power * cosTheta * attenuationFactor * spotlightEffect +
				
				// Specular : reflective highlight, like a mirror
				visibility * vec4(material.kSpecular, 1) * vec4(lights[i].color, 1) * lights[i].power * pow(cosAlpha, material.kShininess) * attenuationFactor * spotlightEffect;

		}
	}
	else
	{
		if(colorTextureEnabled[0] == true && textEnabled == true)
		{
			color = texture2D( colorTexture[0], texCoord ) * vec4( textColor, 1 );
		}
		else
		{
			int texCount = 0;
		
			color = vec4(0, 0, 0, 0);
			for (int i = 0; i < MAX_TEXTURES; ++i)
			{
				if(colorTextureEnabled[i] == true)
				{
					color += texture2D( colorTexture[i], texCoord );
					++texCount;
				}
			}
			if (texCount > 0)
			{
				color = color/texCount;
			}
			else
				color = vec4( fragmentColor, 1 );
		}
		
	}

	if (fogParam.FogEnabled == true)
	{
		float FogDistance = abs(vertexPosition_cameraspace.z);
		float fogFactor = getFogFactor(fogParam, FogDistance);
		// Note: color.xys the variable name color might vary according to the naming convention used.
		color.rgb = mix(color.xyz, fogParam.Color, fogFactor);
	}


}